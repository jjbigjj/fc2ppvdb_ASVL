// ==UserScript==
// @name         FC2PPVDB 自動搜尋並添加鏈接 (OO版)
// @namespace
// @version      3.0.0.1
// @description  自動搜尋 SupJav,_123av.com、missav.com、7mmtv.sx、javfc2.xyz 和 sukebei.nyaa.si，當有搜尋結果時會加個按鈕，按鈕會喺新標籤頁打開。搜尋網站與按鈕鏈接網站可分開設定。每個網站的查詢隊列可以控制同時查詢嘅上限。
// @author       Your Name
// @match        *://*.fc2ppvdb.com/*
// @grant        GM_xmlhttpRequest
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM.setValue
// @grant        GM.getValue
// @run-at       document-end
// @connect      123av.com
// @connect      missav.com
// @connect      7mmtv.sx
// @connect      javfc2.xyz
// @connect      sukebei.nyaa.si
// @connect      supjav.com
// @connect      3xplanet.com
// ==/UserScript==

(function () {
    'use strict';

    /**
     * 通用工具類
     * 呢個類包埋咗一啲常用功能，例如：顯示/移除加載提示、創建按鈕、緩存數據等
     */
    class Utils {
        // 顯示加載提示
        static showLoading(element, siteName) {
            const loadingText = document.createElement("span");
            loadingText.textContent = `搵緊 ${siteName}...`; // 顯示「搵緊 xxx...」
            loadingText.className = "inline-block text-gray-500 ml-2";
            element.parentElement.parentElement.appendChild(loadingText); // 插入到目標元素嘅父元素
            return loadingText;
        }

        // 移除加載提示
        static removeLoading(loadingElement) {
            if (loadingElement) loadingElement.remove(); // 如果加載提示存在，移除
        }

        // 創建按鈕
        static createButton(url, text, bgColorClass) {
            const linkButton = document.createElement("a"); // 創建一個<a>標籤
            linkButton.href = url; // 設置按鈕嘅鏈接
            linkButton.textContent = text; // 設置按鈕嘅文字
            linkButton.className = `inline-block ${bgColorClass} text-white px-2 py-1 rounded mt-2 ml-2`; // 添加樣式
            linkButton.target = "_blank"; // 新標籤頁打開
            return linkButton;
        }

        // 緩存搜尋結果（非同步）
        static async cacheResult(key, data, expiryHours = 12) {
            const timestamp = new Date().getTime(); // 獲取當前時間
            const expiry = timestamp + expiryHours * 60 * 60 * 1000; // 設置過期時間（12小時後）
            const cacheData = { data, expiry }; // 包裝數據同過期時間
            await GM.setValue(key, cacheData); // 用 GM.setValue 儲存數據（非同步操作）
        }

        // 攞緩存結果（非同步）
        static async getCachedResult(key) {
            const cacheData = await GM.getValue(key, null); // 用 GM.getValue 攞緩存數據（非同步操作）
            if (!cacheData) return null; // 如果無緩存，返 null

            const timestamp = new Date().getTime(); // 獲取當前時間
            if (cacheData.expiry < timestamp) {
                await GM.setValue(key, null); // 如果過期，清空緩存
                return null;
            }
            return cacheData.data; // 如果未過期，返返數據
        }
    }

    /**
     * 單個網站類
     * 呢個類負責處理每個網站嘅搜尋邏輯，例如：生成搜尋 URL、處理響應數據、生成按鈕等
     */
    class Site {
        constructor(name, searchUrlFunc, responseHandler, buttonColor, queryInterval = 0, maxConcurrentSearches = 3) {
            this.name = name; // 網站名稱
            this.searchUrlFunc = searchUrlFunc; // 用嚟生成搜尋 URL 嘅函數
            this.responseHandler = responseHandler; // 處理搜索響應數據嘅函數
            this.buttonColor = buttonColor; // 按鈕嘅顏色
            this.queryInterval = queryInterval; // 搜索間隔（毫秒）
            this.maxConcurrentSearches = maxConcurrentSearches; // 同時搜索嘅最大數量
            this.queue = []; // 搜索隊列
            this.isSearching = 0; // 當前進行中嘅搜索數
        }

        // 添加搜索到隊列
        addToQueue(id, element) {
            this.queue.push({ id, element }); // 將搜索任務加入隊列
            if (this.isSearching < this.maxConcurrentSearches) {
                this.processQueue(); // 如果未超過最大並行數量，處理隊列
            }
        }

        // 處理搜索隊列
        async processQueue() {
            // 當前隊列有任務，並且未超過最大並行數量
            while (this.queue.length > 0 && this.isSearching < this.maxConcurrentSearches) {
                const { id, element } = this.queue.shift(); // 從隊列攞出第一個任務
                this.isSearching++; // 增加當前進行中嘅搜索數量
                try {
                    await this.search(id, element); // 執行搜索
                } finally {
                    this.isSearching--; // 搜索完成後減少進行中嘅數量
                    await new Promise(resolve => setTimeout(resolve, this.queryInterval)); // 等待設置嘅搜索間隔
                }
            }
        }

        // 搜索邏輯
        async search(id, element) {
            const cacheKey = `${this.name}_${id}`; // 緩存鍵
            const cachedResult = await Utils.getCachedResult(cacheKey); // 嘗試從緩存攞數據
            if (cachedResult) {
                if (cachedResult.url) {
                    this.addButton(element, cachedResult.url); // 如果緩存有 URL，直接生成按鈕
                }
                return;
            }

            const searchUrl = this.searchUrlFunc(id); // 生成搜索 URL
            const loadingElement = Utils.showLoading(element, this.name); // 顯示加載提示
            new Promise((resolve, reject) => {
            // 用 GM_xmlhttpRequest 發送搜索請求
            GM_xmlhttpRequest({
                method: "GET",
                url: searchUrl,
                onload: (response) => {
                    let previewData = { url: '' }; // 初始化結果數據
                    this.responseHandler(response, id, previewData); // 調用響應處理函數
                    if (previewData.url) {
                        this.addButton(element, previewData.url); // 如果有搜索結果，生成按鈕
                    }
                    Utils.removeLoading(loadingElement); // 移除加載提示
                    Utils.cacheResult(cacheKey, previewData); // 緩存搜索結果
                },
                onerror: () => {
                    Utils.removeLoading(loadingElement); // 如果出錯，移除加載提示
                    console.error(`${this.name} 搜尋失敗`); // 打印錯誤信息
                },
            });
        })
        }

        // 添加按鈕到頁面
        addButton(element, url) {
            const button = Utils.createButton(url, this.name, this.buttonColor); // 創建按鈕
            element.parentElement.parentElement.appendChild(button); // 將按鈕添加到頁面
        }
    }

    /**
     * 管理所有網站嘅類
     * 呢個類負責管理多個網站嘅搜索操作，將搜索分派到對應嘅網站類
     */
    class SearchManager {
        constructor() {
            this.sites = []; // 儲存所有網站
        }

        // 添加網站
        addSite(site) {
            this.sites.push(site);
        }

        // 初始化搜索
        initializeSearch() {
            const elements = document.querySelectorAll("span.absolute.top-0.left-0"); // 攞到所有標籤元素
            elements.forEach(element => {
                const id = element.textContent.trim(); // 獲取標籤內容作為 ID
                this.sites.forEach(site => site.addToQueue(id, element)); // 將搜索任務分派到每個網站
            });
        }
    }

    // 創建 SearchManager 實例
    const manager = new SearchManager();

    // 添加各個網站
    manager.addSite(new Site(
        '_123av',
        id => `https://123av.com/zh/search?keyword=${id}`,
        (response, id, previewData) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(response.responseText, "text/html");
            const videoCount = doc.querySelector(".text-muted")?.textContent.trim();
            if (videoCount && videoCount !== "0 视频") {
                previewData.url = `https://123av.com/zh/search?keyword=${id}`;
            }
        },
        'bg-blue-500'
    ));

    manager.addSite(new Site(
        'MissAV',
        id => `https://missav.com/search/${id}`,
        (response, id, previewData) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(response.responseText, "text/html");
            const matchingLink = Array.from(doc.querySelectorAll('a[alt]')).find(a => {
                const altText = a.getAttribute('alt').toLowerCase();
                const linkText = a.textContent.toLowerCase();
                return altText.includes(id.toLowerCase()) && linkText.includes(id.toLowerCase());
            });
            if (matchingLink) {
                previewData.url = `https://missav.com/search/${id}`;
            }
        },
        'bg-green-500'
    ));

    manager.addSite(new Site(
        '7MMTV',
        id => `https://7mmtv.sx/zh/searchform_search/all/index.html?search_keyword=${encodeURIComponent(id)}&search_type=searchall&op=search`,
        (response, id, previewData) => {
            const responseText = response.responseText;
            const matchResult = responseText.match(new RegExp(`搜索 "${id}" \\((\\d+)\\)`));
            if (matchResult && parseInt(matchResult[1]) > 0) {
                previewData.url = `https://7mmtv.sx/zh/searchform_search/all/index.html?search_keyword=${encodeURIComponent(id)}`;
            }
        },
        'bg-red-500'
    ));

    manager.addSite(new Site(
        'JAVFC2',
        id => `https://javfc2.xyz/search?q=${id}`,
        (response, id, previewData) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(response.responseText, "text/html");
            const nothingFound = Array.from(doc.querySelectorAll('h4')).find(h4 => h4.textContent.includes("Nothing found by"));
            if (!nothingFound) {
                previewData.url = `https://javfc2.xyz/search?q=${id}`;
            }
        },
        'bg-purple-500'
    ));

    manager.addSite(new Site(
        'Sukebei',
        id => `https://sukebei.nyaa.si/?page=rss&q=${encodeURIComponent(id)}&c=0_0&f=0`,
        (response, id, previewData) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(response.responseText, "text/xml");
            const items = doc.querySelectorAll("item");
            if (items.length > 0) {
                previewData.url = `https://sukebei.nyaa.si/?f=0&c=0_0&q=${encodeURIComponent(id)}&s=seeders&o=desc`;
            }
        },
        'bg-yellow-500'
    ));

    manager.addSite(new Site(
        'SupJav',
        id => `https://supjav.com/?s=${id}`,
        (response, id, previewData) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(response.responseText, "text/html");
            const h1Element = doc.querySelector("h1");
            if (h1Element && h1Element.textContent.includes(`Search Result For: ${id}`)) {
                const resultCount = h1Element.textContent.match(/\((\d+)\)/);
                if (resultCount && parseInt(resultCount[1]) > 0) {
                    previewData.url = `https://supjav.com/?s=${id}`;
                }
            }
        },
        'bg-orange-500'
    ));

	manager.addSite(new Site(
        '3xplanet',
        id => `https://3xplanet.com/?s=${id}`,
        (response, id, previewData) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(response.responseText, "text/html");
            const noResults = doc.querySelector("h2");
            if (!noResults || !noResults.textContent.includes("No results for your search")) {
                previewData.url = `https://3xplanet.com/?s=${id}`;
            }
        },
        'bg-gray-500'
    ));


    // 開始搜索
    manager.initializeSearch();
})();
